/*
 * Tencent is pleased to support the open source community by making TKEStack
 * available.
 *
 * Copyright (C) 2012-2020 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use
 * this file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 * https://opensource.org/licenses/Apache-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OF ANY KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations under the License.
 */

// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package tkestack.io.tke.api.authz.v1;

import "k8s.io/api/rbac/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1";

message ClusterRoleTemplateBinding {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ClusterRoleTemplateBindingSpec spec = 2;

  optional ClusterRoleTemplateBindingStatus status = 3;
}

// ClusterRoleTemplateBindingList is a resource containing a list of ClusterRoleTemplateBinding objects.
message ClusterRoleTemplateBindingList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is the list of ConfigMaps.
  repeated ClusterRoleTemplateBinding items = 2;
}

message ClusterRoleTemplateBindingSpec {
  // +optional
  optional string userName = 1;

  // +optional
  optional string groupName = 2;

  optional string roleTemplateName = 3;

  repeated string clusters = 4;
}

message ClusterRoleTemplateBindingStatus {
  // Phase the release is in, one of ('Installing', 'Succeeded', 'Failed')
  // +optional
  optional string phase = 1;

  // The last time the condition transitioned from one status to another.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 2;

  // The reason for the condition's last transition.
  // +optional
  optional string reason = 3;

  // A human readable message indicating details about the transition.
  // +optional
  optional string message = 4;

  // +optional
  repeated ClusterRoleTemplateBindingStatusItem clusters = 5;
}

message ClusterRoleTemplateBindingStatusItem {
  // Phase the release is in, one of ('Installing', 'Succeeded', 'Failed')
  // +optional
  optional string phase = 1;

  // The last time the condition transitioned from one status to another.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 2;

  // The reason for the condition's last transition.
  // +optional
  optional string reason = 3;

  // A human readable message indicating details about the transition.
  // +optional
  optional string message = 4;
}

// ConfigMap holds configuration data for tke to consume.
message ConfigMap {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Data contains the configuration data.
  // Each key must consist of alphanumeric characters, '-', '_' or '.'.
  // Values with non-UTF-8 byte sequences must use the BinaryData field.
  // The keys stored in Data must not overlap with the keys in
  // the BinaryData field, this is enforced during validation process.
  // +optional
  map<string, string> data = 2;

  // BinaryData contains the binary data.
  // Each key must consist of alphanumeric characters, '-', '_' or '.'.
  // BinaryData can contain byte sequences that are not in the UTF-8 range.
  // The keys stored in BinaryData must not overlap with the ones in
  // the Data field, this is enforced during validation process.
  // +optional
  map<string, bytes> binaryData = 3;
}

// ConfigMapList is a resource containing a list of ConfigMap objects.
message ConfigMapList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is the list of ConfigMaps.
  repeated ConfigMap items = 2;
}

// Role is a collection with multiple policies.
message Role {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional string displayName = 2;

  optional string tenantID = 3;

  // Username is Creator
  optional string username = 4;

  optional string description = 5;

  repeated string policies = 6;
}

message RoleBinding {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional RoleBindingSpec spec = 2;
}

message RoleBindingList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of rules.
  repeated RoleBindingList items = 2;
}

message RoleBindingSpec {
  // +optional
  optional string userName = 1;

  // +optional
  optional string groupName = 2;

  optional string roleName = 3;

  repeated string clusters = 4;
}

// RoleList is the whole list of policy.
message RoleList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of rules.
  repeated Role items = 2;
}

// RoleTemplate is a rbac template in TKE.
message RoleTemplate {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // +optional
  optional RoleTemplateSpec spec = 2;

  // +optional
  optional RoleTemplateStatus status = 3;
}

// RoleTemplateList is the whole list of all rbac templates.
message RoleTemplateList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of bootstraps
  repeated RoleTemplate items = 2;
}

message RoleTemplateSpec {
  optional string tenantID = 1;

  optional string displayName = 2;

  // +optional
  optional string description = 3;

  // +optional
  optional string scope = 4;

  repeated k8s.io.api.rbac.v1.PolicyRule rules = 5;
}

message RoleTemplateStatus {
  // Phase the release is in, one of ('Installing', 'Succeeded', 'Failed')
  // +optional
  optional string phase = 1;

  // The last time the condition transitioned from one status to another.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 2;

  // The reason for the condition's last transition.
  // +optional
  optional string reason = 3;

  // A human readable message indicating details about the transition.
  // +optional
  optional string message = 4;
}

