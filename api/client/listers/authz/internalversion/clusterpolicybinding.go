/*
 * Tencent is pleased to support the open source community by making TKEStack
 * available.
 *
 * Copyright (C) 2012-2020 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use
 * this file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 * https://opensource.org/licenses/Apache-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OF ANY KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations under the License.
 */

// Code generated by lister-gen. DO NOT EDIT.

package internalversion

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	authz "tkestack.io/tke/api/authz"
)

// ClusterPolicyBindingLister helps list ClusterPolicyBindings.
// All objects returned here must be treated as read-only.
type ClusterPolicyBindingLister interface {
	// List lists all ClusterPolicyBindings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*authz.ClusterPolicyBinding, err error)
	// ClusterPolicyBindings returns an object that can list and get ClusterPolicyBindings.
	ClusterPolicyBindings(namespace string) ClusterPolicyBindingNamespaceLister
	ClusterPolicyBindingListerExpansion
}

// clusterPolicyBindingLister implements the ClusterPolicyBindingLister interface.
type clusterPolicyBindingLister struct {
	indexer cache.Indexer
}

// NewClusterPolicyBindingLister returns a new ClusterPolicyBindingLister.
func NewClusterPolicyBindingLister(indexer cache.Indexer) ClusterPolicyBindingLister {
	return &clusterPolicyBindingLister{indexer: indexer}
}

// List lists all ClusterPolicyBindings in the indexer.
func (s *clusterPolicyBindingLister) List(selector labels.Selector) (ret []*authz.ClusterPolicyBinding, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*authz.ClusterPolicyBinding))
	})
	return ret, err
}

// ClusterPolicyBindings returns an object that can list and get ClusterPolicyBindings.
func (s *clusterPolicyBindingLister) ClusterPolicyBindings(namespace string) ClusterPolicyBindingNamespaceLister {
	return clusterPolicyBindingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ClusterPolicyBindingNamespaceLister helps list and get ClusterPolicyBindings.
// All objects returned here must be treated as read-only.
type ClusterPolicyBindingNamespaceLister interface {
	// List lists all ClusterPolicyBindings in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*authz.ClusterPolicyBinding, err error)
	// Get retrieves the ClusterPolicyBinding from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*authz.ClusterPolicyBinding, error)
	ClusterPolicyBindingNamespaceListerExpansion
}

// clusterPolicyBindingNamespaceLister implements the ClusterPolicyBindingNamespaceLister
// interface.
type clusterPolicyBindingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ClusterPolicyBindings in the indexer for a given namespace.
func (s clusterPolicyBindingNamespaceLister) List(selector labels.Selector) (ret []*authz.ClusterPolicyBinding, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*authz.ClusterPolicyBinding))
	})
	return ret, err
}

// Get retrieves the ClusterPolicyBinding from the indexer for a given namespace and name.
func (s clusterPolicyBindingNamespaceLister) Get(name string) (*authz.ClusterPolicyBinding, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(authz.Resource("clusterpolicybinding"), name)
	}
	return obj.(*authz.ClusterPolicyBinding), nil
}
